@page "/services"
@using BarberCo.SharedLibrary.Dtos
@using BarberCo.SharedLibrary.Services
@using BarberCo.SharedLibrary.Models
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@inject IBarberCoApiService ApiService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IAuthService AuthService

<PageTitle>Services</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">
    <MudText Typo="Typo.h4" Class="mb-4">Services</MudText>

    <MudPaper Elevation="0" Class="d-flex justify-end mb-4">
        <AuthorizeView Roles="admin">
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.AddCircle"
                       OnClick="OpenAddServiceDialog">
                Add Service
            </MudButton>
        </AuthorizeView>
    </MudPaper>

    @if (_loading)
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Class="my-8" />
    }
    else
    {
        <MudGrid>
            @foreach (var service in _services)
            {
                <MudItem xs="12" sm="6" md="4">
                    <MudPaper Class="service-card" Elevation="2">
                        <div class="service-content pa-4">
                            <div class="d-flex justify-space-between align-center mb-2">
                                <MudIcon Icon="@Icons.Material.Filled.ContentCut" Size="Size.Large" Color="Color.Primary" />
                                <MudText Typo="Typo.h5" Color="Color.Success" Class="font-weight-bold">
                                    @service.Price.ToString("C")
                                </MudText>
                            </div>
                            <MudText Typo="Typo.h6" Class="mb-2">@service.Name</MudText>
                        </div>

                        <AuthorizeView Roles="admin">
                            <MudCardActions Class="service-actions pa-2">
                                <MudButton Variant="Variant.Text"
                                           Color="Color.Primary"
                                           StartIcon="@Icons.Material.Filled.Edit"
                                           OnClick="@(() => OpenEditServiceDialog(service))"
                                           FullWidth="false">
                                    Edit
                                </MudButton>
                                <MudSpacer />
                                <MudButton Variant="Variant.Text"
                                           Color="Color.Error"
                                           StartIcon="@Icons.Material.Filled.Delete"
                                           OnClick="@(() => DeleteService(service))"
                                           FullWidth="false">
                                    Delete
                                </MudButton>
                            </MudCardActions>
                        </AuthorizeView>
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>
    }
</MudContainer>

@* Add/Edit Service Dialog *@
<MudDialog @bind-Visible="_dialogVisible" Options="@(new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true })">
    <TitleContent>
        <MudText Typo="Typo.h6">
            @(_isEditMode ? $"Edit Service - {_editingService?.Name}" : "Add New Service")
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="_form" @bind-IsValid="@_formIsValid">
            <MudGrid>
                <MudItem xs="12">
                    <MudTextField T="string"
                                  Label="Service Name"
                                  @bind-Value="_formModel.Name"
                                  Required="true"
                                  RequiredError="Service name is required"
                                  Variant="Variant.Outlined"
                                  Immediate="true"
                                  HelperText="e.g., Haircut, Beard Trim, etc." />
                </MudItem>

                <MudItem xs="12">
                    <MudNumericField T="decimal"
                                     Label="Price"
                                     @bind-Value="_formModel.Price"
                                     Required="true"
                                     RequiredError="Price is required"
                                     Validation="@(new Func<decimal, string>(ValidatePrice))"
                                     Variant="Variant.Outlined"
                                     Immediate="true"
                                     Format="C2"
                                     Min="0.01m"
                                     Max="9999.99m"
                                     Step="0.01m"
                                     Adornment="Adornment.Start"
                                     AdornmentIcon="@Icons.Material.Filled.AttachMoney"
                                     HelperText="Enter the service price" />
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@(() => _dialogVisible = false)">Cancel</MudButton>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="SaveService"
                   Disabled="@(!_formIsValid || _savingService)">
            @if (_savingService)
            {
                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
            }
            @(_isEditMode ? "Update" : "Add") Service
        </MudButton>
    </DialogActions>
</MudDialog>

<style>
    .service-card {
        position: relative;
        transition: all 0.3s ease;
        overflow: hidden;
        background: linear-gradient(135deg, var(--mud-palette-surface) 0%, var(--mud-palette-surface) 100%);
    }

        .service-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 8px 24px rgba(0,0,0,0.15);
        }

    .service-content {
        min-height: 120px;
    }

    .service-actions {
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        background: rgba(0,0,0,0.05);
        backdrop-filter: blur(10px);
        opacity: 0;
        transform: translateY(100%);
        transition: all 0.3s ease;
    }

    .service-card:hover .service-actions {
        opacity: 1;
        transform: translateY(0);
    }
</style>

@code {
    private MudForm _form;
    private bool _formIsValid;
    private bool _loading = true;
    private bool _savingService = false;
    private List<Service> _services = new();
    private bool _isAdmin = false;
    private TokenDto _currentUser;

    // Dialog state
    private bool _dialogVisible = false;
    private bool _isEditMode = false;
    private Service? _editingService;
    private ServiceUpdateDto _formModel = new();

    protected override async Task OnInitializedAsync()
    {
        // Check if user is admin
        _currentUser = await AuthService.GetCurrentTokenAsync();
        _isAdmin = _currentUser.Roles.Contains("admin");

        await LoadServicesAsync();
    }

    private async Task LoadServicesAsync()
    {
        try
        {
            _loading = true;
            _services = await ApiService.GetAsync<List<Service>>("service");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading services: {ex.Message}", Severity.Error);
        }
        finally
        {
            _loading = false;
        }
    }

    private void OpenAddServiceDialog(MouseEventArgs args)
    {
        _isEditMode = false;
        _editingService = null;
        _formModel = new ServiceUpdateDto();
        _dialogVisible = true;
    }

    private void OpenEditServiceDialog(Service service)
    {
        _isEditMode = true;
        _editingService = service;
        _formModel = new ServiceUpdateDto
        {
            Name = service.Name,
            Price = service.Price
        };
        _dialogVisible = true;
    }

    private async Task SaveService()
    {
        if (!_formIsValid || _savingService) return;

        try
        {
            _savingService = true;

            if (_isEditMode && _editingService != null)
            {
                // Update existing service
                var result = await ApiService.PutAsync<ServiceUpdateDto, Service>(
                    $"service/{_editingService.Id}",
                    _formModel);

                // Update the service in the list
                var index = _services!.FindIndex(s => s.Id == result.Id);
                if (index >= 0)
                {
                    _services[index] = result;
                }

                Snackbar.Add("Service updated successfully", Severity.Success);
            }
            else
            {
                // Create new service
                var result = await ApiService.PostAsync<ServiceUpdateDto, Service>(
                    "service",
                    _formModel);

                _services!.Add(result);
                _services = _services.OrderBy(s => s.Name).ToList(); // Keep list sorted

                Snackbar.Add("Service created successfully", Severity.Success);
            }

            _dialogVisible = false;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error saving service: {ex.Message}", Severity.Error);
        }
        finally
        {
            _savingService = false;
        }
    }

    private async Task DeleteService(Service service)
    {
        var result = await DialogService.ShowMessageBox(
            "Delete Service",
            $"Are you sure you want to delete \"{service.Name}\"? This action cannot be undone.",
            yesText: "Delete",
            cancelText: "Cancel");

        if (result == true)
        {
            try
            {
                await ApiService.DeleteAsync($"service/{service.Id}");

                // Remove the service from the list
                _services!.Remove(service);

                Snackbar.Add("Service deleted successfully", Severity.Success);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting service: {ex.Message}", Severity.Error);
            }
        }
    }

    private string ValidatePrice(decimal price)
    {
        if (price <= 0)
            return "Price must be greater than $0.00";
        if (price > 9999.99m)
            return "Price cannot exceed $9,999.99";
        return null;
    }
}