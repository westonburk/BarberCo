@page "/contact"
@inject IHourService HourService
@inject ILogger<Hour> logger

<div class="contact-container">
    <h1>Contact</h1>
    <div class="grid">
        <div class="hours">
            @if (isLoading)
            {
                <p>Loading hours...</p>
            }
            else if (errorMessage != null)
            {
                <p class="error">@errorMessage</p>
            }
            else
            {
                <ul>
                    @foreach (var item in hours.OrderBy(x => x.Item1))
                    {
                        if (item.Item2.IsClosed)
                        {
                            <li>@item.Item2.DayOfWeek Closed</li>
                        }
                        else
                        {
                            <li>@item.Item2.DayOfWeek @item.Item2.StartTime.ToString("htt")-@item.Item2.EndTime.ToString("htt")</li>
                        }
                    }
                </ul>
            }
        </div>
        <div class="contact-info">
            <div class="contact-item">
                <i class="material-icons">mail</i>
                <span>example@email.com</span>
            </div>
            <div class="contact-item">
                <i class="material-icons">phone</i>
                <span>(123) 456-7890</span>
            </div>
            <div class="contact-item">
                <i class="material-icons">location_on</i>
                <a href="https://maps.app.goo.gl/yKo3WYLA3aU5LCt2A">20 W 34th St., New York, NY 10001</a>
            </div>
        </div>
        <iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d6312.862677093851!2d-73.98823395938666!3d40.74844047150719!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x89c259a9b3117469%3A0xd134e199a405a163!2sEmpire%20State%20Building!5e1!3m2!1sen!2sus!4v1754778205889!5m2!1sen!2sus" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>
    </div>
</div>

@code {
    private List<(int, Hour)> hours;
    private bool isLoading = true;
    private string? errorMessage = null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadHoursAsync();
            StateHasChanged(); 
        }
    }

    private async Task LoadHoursAsync()
    {
        try
        {
            hours = await HourService.GetAllHoursAsync();
        }
        catch (Exception ex)
        {
            logger.LogError(ex, $"failed to load {nameof(Hour)} from api");
            errorMessage = "Failed to connect to the API";
        }
        finally
        {
            isLoading = false;
        }
    }
}
