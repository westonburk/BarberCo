@page "/appointment"
@using System.ComponentModel.DataAnnotations
@using BarberCo.SharedLibrary.Dtos
@inject IServiceService ServiceService
@inject ILogger<Appointment> logger
@inject IAppointmentService AppointmentService
@inject NavigationManager Navigation

<div class="appointment-container">
    <h1>Appointment</h1>
    @if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            <strong>Error:</strong> @errorMessage
        </div>
    }
    <EditForm Model="@formData" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <div class="row mb-3">
            <div class="col-md-6">
                <label for="name">Name:</label>
                <InputText id="name" class="form-control" @bind-Value="formData.Name" />
                <ValidationMessage For="@(() => formData.Name)" />
            </div>
            <div class="col-md-6">
                <label for="phone">Phone:</label>
                <InputText id="phone" class="form-control" 
                           @bind-Value="formData.Phone" 
                           @oninput="@((e) => FormatPhoneNumber(e.Value?.ToString()))"
                           placeholder="(123) 456-7890"
                           maxLength="14"/>
                <ValidationMessage For="@(() => formData.Phone)" />
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-6">
                <label for="date">Date:</label>
                <InputDate id="date" class="form-control" @bind-Value:after="AfterDateChangedAsync" @bind-Value="formData.Date" />
                <ValidationMessage For="@(() => formData.Date)" />
            </div>
            <div class="col-md-6">
                <label for="time">Time:</label>
                <select id="time" class="form-select" @bind="formData.Time" disabled="@(!canEditTime)">
                    <option value=""></option>
                    @foreach (var time in times)
                    {
                        <option value="@time.value">@time.display</option>
                    }
                </select>
                <ValidationMessage For="@(() => formData.Time)" />
            </div>
        </div>
        <div class="row mb-3">
            <label for="services-multiselect">Select Service(s):</label>
            <div class="services-list" id="services-multiselect">
                @foreach (var service in allServices)
                {
                    <div class="service-item @(formData.SelectedServices.Contains(service) ? "selected-service" : null)"
                         @onclick="() => ToggleServiceSelection(service)">
                        @($"{service.Name}   {service.Price:C2}")
                    </div>
                }
            </div>
            <ValidationMessage For="@(() => formData.SelectedServices)" />
        </div>
        <button type="submit" class="btn-appointment">Submit</button>
    </EditForm>
</div>


@code {
    private bool canEditTime = true;
    private bool isSubmitting = false;
    private string? errorMessage = null;
    private FormData formData = new FormData();
    private List<Service> allServices = new();
    private List<(DateTime value, string display)> times = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await PopulateTimesAsync();
            await LoadServicesAsync();
            await base.OnInitializedAsync();
        }
        catch (Exception ex)
        {
            logger.LogError(ex, $"error loading {nameof(_Appointment)} page");
        }
    }

    private async Task LoadServicesAsync()
    {
        try
        {
            allServices = await ServiceService.GetAllServicesAsync();
        }
        catch (Exception ex)
        {
            logger.LogError(ex, $"failed to load {nameof(Service)} from api");
        }
    }

    private async Task AfterDateChangedAsync()
    {
        try
        {
            await PopulateTimesAsync();
        }
        catch (Exception ex)
        {
            logger.LogError(ex, $"");
        }
    }

    private async Task PopulateTimesAsync()
    {
        formData.Time = null;
        times.Clear();
        var validTimes = await AppointmentService.GetValidTimesForDayAsync(formData.Date);
        if (validTimes.Count == 0)
        {
            times.Add((default, "No Availiablility"));
            formData.Time = times[0].value;
            canEditTime = false;
        }
        else
        {
            canEditTime = true;
            times.AddRange(validTimes);
        }
    }

    private void ToggleServiceSelection(Service service)
    {
        if (formData.SelectedServices.Contains(service))
        {
            formData.SelectedServices.Remove(service);
        }
        else
        {
            formData.SelectedServices.Add(service);
        }
    }

    private async Task HandleValidSubmit()
    {
        if (isSubmitting == true)
            return;

        try
        {
            isSubmitting = true;
            errorMessage = null;
            var apt = new AppointmentUpdateDto();
            apt.CustomerName = formData.Name;
            apt.CustomerPhone = formData.Phone;
            apt.DateTime = new DateTime(formData.Date.Year, formData.Date.Month, formData.Date.Day, formData.Time.Value.Hour, 0, 0);
            apt.ServiceIds = formData.SelectedServices.Select(x => x.Id).ToList();
            var newApt = await AppointmentService.SubmitAppointmentAsync(apt);

            Navigation.NavigateTo($"/appointment-success/{newApt.DateTime:s}");
        }
        catch (HttpRequestException ex)
        {
            errorMessage = ex.Message;
            if (ex.StatusCode != System.Net.HttpStatusCode.UnprocessableEntity)
            {
                logger.LogError(ex, "HTTP error submitting appointment");
            }
        }
        catch (Exception ex)
        {
            logger.LogError(ex, $"error submitting appointment");
        }
        finally
        {
            isSubmitting = false;
        }
    }


    /// <summary>
    /// needed to implement my own mask since I decided not to use 3rd party controls on this project
    /// </summary>
    /// <param name="input"></param>
    private void FormatPhoneNumber(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            formData.Phone = "";
            return;
        }
        
        // Remove all non-numeric characters
        var digits = new string(input.Where(char.IsDigit).ToArray());
        
        // Limit to 10 digits
        if (digits.Length > 10)
            digits = digits.Substring(0, 10);
       
        // Format the phone number
        if (digits.Length >= 6)
        {
            formData.Phone = $"({digits.Substring(0, 3)}) {digits.Substring(3, 3)}-{digits.Substring(6)}";
        }
        else if (digits.Length >= 3)
        {
            formData.Phone = $"({digits.Substring(0, 3)}) {digits.Substring(3)}";
        }
        else if (digits.Length > 0)
        {
            formData.Phone = $"({digits}";
        }
        else
        {
            formData.Phone = "";
        }
    }
    
    public class FormData
    {
        [Required]
        public string Name { get; set; }

        [Required]
        [RegularExpression(@"^\(\d{3}\) \d{3}-\d{4}$", ErrorMessage = "Phone must be in format (123) 456-7890")]
        public string Phone { get; set; }

        [Required]
        public DateTime Date { get; set; } = DateTime.Now;

        [Required]
        public DateTime? Time { get; set; } = null;

        public List<Service> SelectedServices { get; set; } = new();
    }
}
