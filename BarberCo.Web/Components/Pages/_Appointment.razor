@page "/appointment"
@using System.ComponentModel.DataAnnotations
@using BarberCo.SharedLibrary.Dtos
@inject IServiceService ServiceService
@inject ILogger<Appointment> logger
@inject IAppointmentService AppointmentService

<div class="appointment-container">
    <h1>Appointment</h1>
    <EditForm Model="@formData" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <div class="row mb-3">
            <div class="col-md-6">
                <label for="name">Name:</label>
                <InputText id="name" class="form-control" @bind-Value="formData.Name" />
                <ValidationMessage For="@(() => formData.Name)" />
            </div>
            <div class="col-md-6">
                <label for="phone">Phone:</label>
                <InputText id="phone" class="form-control" @bind-Value="formData.Phone" />
                <ValidationMessage For="@(() => formData.Phone)" />
            </div>
        </div>
        <div class="row mb-3">
            <div class="col-md-6">
                <label for="date">Date:</label>
                <InputDate id="date" class="form-control" @bind-Value:after="AfterDateChangedAsync" @bind-Value="formData.Date" />
                <ValidationMessage For="@(() => formData.Date)" />
            </div>
            <div class="col-md-6">
                <label for="time">Time:</label>
                <select id="time" class="form-select" @bind="formData.Time" disabled="@(!canEditTime)">
                    <option value=""></option>
                    @foreach (var time in times)
                    {
                        <option value="@time.value">@time.display</option>
                    }
                </select>
                <ValidationMessage For="@(() => formData.Time)" />
            </div>
        </div>
        <div class="row mb-3">
            <label for="services-multiselect">Select Service(s):</label>
            <div class="services-list" id="services-multiselect">
                @foreach (var service in allServices)
                {
                    <div class="service-item @(formData.SelectedServices.Contains(service) ? "selected-service" : null)"
                         @onclick="() => ToggleServiceSelection(service)">
                        @($"{service.Name}   {service.Price:C2}")
                    </div>
                }
            </div>
            <ValidationMessage For="@(() => formData.SelectedServices)" />
        </div>
        <button type="submit" class="btn-appointment">Submit</button>
    </EditForm>
</div>


@code {
    private bool canEditTime = true;
    private FormData formData = new FormData();
    private List<Service> allServices = new();
    private List<(DateTime value, string display)> times = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await PopulateTimesAsync();
            await LoadServicesAsync();
            await base.OnInitializedAsync();
        }
        catch (Exception ex)
        {
            logger.LogError(ex, $"error loading {nameof(_Appointment)} page");
        }
    }

    private async Task LoadServicesAsync()
    {
        try
        {
            allServices = await ServiceService.GetAllServicesAsync();
        }
        catch (Exception ex)
        {
            logger.LogError(ex, $"failed to load {nameof(Service)} from api");
        }
    }

    private async Task AfterDateChangedAsync()
    {
        try
        {
            await PopulateTimesAsync();
        }
        catch (Exception ex)
        {
            logger.LogError(ex, $"");
        }
    }

    private async Task PopulateTimesAsync()
    {
        formData.Time = null;
        times.Clear();
        var validTimes = await AppointmentService.GetValidTimesForDayAsync(formData.Date);
        if (validTimes.Count == 0)
        {
            times.Add((default, "No Availiablility"));
            formData.Time = times[0].value;
            canEditTime = false;
        }
        else
        {
            canEditTime = true;
            times.AddRange(validTimes);
        }
    }

    private void ToggleServiceSelection(Service service)
    {
        if (formData.SelectedServices.Contains(service))
        {
            formData.SelectedServices.Remove(service);
        }
        else
        {
            formData.SelectedServices.Add(service);
        }
    }

    private async Task HandleValidSubmit()
    {
        var apt = new AppointmentUpdateDto();
        apt.CustomerName = formData.Name;
        apt.CustomerPhone = formData.Phone;
        apt.DateTime = new DateTime(formData.Date.Year, formData.Date.Month, formData.Date.Day, formData.Time.Value.Hour, 0, 0);
        apt.ServiceIds = formData.SelectedServices.Select(x => x.Id).ToList();
        var newApt = await AppointmentService.SubmitAppointmentAsync(apt);
    }

    public class FormData
    {
        [Required]
        public string Name { get; set; }

        [Required]
        [Phone]
        public string Phone { get; set; }

        [Required]
        public DateTime Date { get; set; } = DateTime.Now;

        [Required]
        public DateTime? Time { get; set; } = null;

        public List<Service> SelectedServices { get; set; } = new();
    }
}
